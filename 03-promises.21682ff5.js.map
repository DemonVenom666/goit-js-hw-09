{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAG3BH,EAAQI,OAAOJ,EAAMK,OACrBH,EAAOE,OAAOF,EAAKG,OACnBF,EAASC,OAAOD,EAAOE,OAEvB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAC3BC,EAAcD,EAAGN,GACdQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUT,EAAKQ,EAALR,MACjBZ,EAAAsB,OAAOC,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAANZ,EAAM,MAAK,CAAEa,SAAS,G,IAE9EC,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUT,EAAKQ,EAALR,MAClBZ,EAAAsB,OAAOK,QAAQ,sBAAuCH,OAAfH,EAAS,QAAYG,OAANZ,EAAM,MAAK,CAAEa,SAAS,G,IAI7EG,SAAQ,W,OAAM1B,KAAK2B,O,IAkBxB,SAASX,EAAcG,EAAUT,GAC/B,IAAMkB,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEb,WAAUT,UAEpBuB,EAAO,CAAEd,WAAUT,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form')\n};\n\nrefs.form.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n\n  let {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  delay = Number(delay.value);\n  step = Number(step.value);\n  amount = Number(amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { useIcon: false });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { useIcon: false });\n      })\n      // delay += step;\n      // .finally(() => form.reset());\n      .finally(() => form.reset());\n  }\n\n  // for (let i = 0; i < amount; i++) {\n  //   const position = i + 1;\n  //   const delay = firstDelay + i * delaySteep;\n  //   createPromise(position, delay)\n  //     .then(({ position, delay }) => {\n  //       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     })\n  //     .finally(() => form.reset());\n  // }\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((fulfill, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          fulfill({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n}"],"names":["$h6c0i","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","Number","value","i","createPromise","then","param","position","Notify","success","concat","useIcon","catch","failure","finally","reset","shouldResolve","Math","random","Promise","fulfill","reject","setTimeout"],"version":3,"file":"03-promises.21682ff5.js.map"}